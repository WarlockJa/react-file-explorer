    // initialise npm package
npm init

    // create a folder structure
mkdir src
mkdir src/components
mkdir src/components/Button

    // create index files in each folder exporting all content
touch src/index.ts
touch src/components/index.ts
touch src/components/Button/index.ts
touch src/components/Button/Button.tsx

    // install dependencies
npm i react typescript @types/react --save-dev

    // initialise typescript
npx tsc --init

    // edit tsconfig fields
"jsx": "react",                         // telling TS that jsx is react
"declaration": true,                    // provideing types for TS users *.d.ts
"declarationDir": "types",              // types directory
"sourceMap": true,                      // debugging tool for converted js files from ts
"outDir": "dist",                       // output folder
"moduleResolution": "node",             // defining how modules will be imported. using node method
"allowSyntheticDefaultImports": true,   // if not exporting default assume that we are
"emitDeclarationOnly": true             // declaring for TS to bundle only ts files. js files will be bundled by the bundler (in this case rollup)

    // adding Rollup (js bundler). Webpack is better at bundling large applications. Rollup is better suited for libraries.
    // installing rollup and necessary plugins as dev dependencies
@rollup/plugin-node-resolve             // tells rollup how to resolve imports
@rollup/plugin-commonjs                 // lets bundle library using commonjs as well as esx module as per library user's choice
@rollup/plugin-typescript               // for typescript support
tslib                                   // @rollup/plugin-typescript dependency
rollup-plugin-dts                       // for type definition files *.d.ts
npm i rollup @rollup/plugin-node-resolve @rollup/plugin-commonjs @rollup/plugin-typescript tslib rollup-plugin-dts --save-dev

    // adding rollup config file
touch rollup.config.js

    // initial rollup.config.js
{
        // importing installed rollup plugins
        import resolve from "@rollup/plugin-node-resolve";
        import commonjs from "@rollup/plugin-commonjs";
        import typescript from "@rollup/plugin-typescript";
        import dts from "rollup-plugin-dts";

        // adding package.json as a variable sp we can refer to it
        const packageJson = require("./package.json");

        export default [
        {
            // entry point for the library
            input: "src/index.ts",
            // rollup outputs
            output: [
            {
                // commonjs output
                file: packageJson.main,
                format: "cjs",
                sourcemap: true,
            },
            {
                // esx output
                file: packageJson.module,
                format: "esm",
                sourcemap: true,
            },
            ],
            // rollup plugins
            plugins: [
            resolve(),
            commonjs(),
            // tsconfig needs to be specified
            typescript({ tsconfig: "./tsconfig.json" }),
            ],
        },
        {
            // *.d.ts configuration for rollup dts plugin
            input: "dist/esm/types/index.d.ts",
            output: [{ file: "dist/index.d.ts", format: "esm" }],
            plugins: [dts()],
        },
        ];
}

    // adjusting package.json according to rollup config file
    ...
"main": "dist/cjs/index.js",    // defines where commonjs modules going to be
"module": "dist/esm/index.js",  // defines where esx modules going to be
"files": [
  "dist"                        // states where all output will be stored. where the library itself will be.
],
"types": "dist/index.d.ts"      // where type definition files will be *.d.ts

    // buliding a library
    // adding script to package.json
"scripts": {
  "rollup": "rollup -c" // -c means with config. i.e. rollup.config.js
},

    // running the rollup script
npm run rollup

    // configuring git
    // creating empty git project
git init
    // make .gitignore and add node_modules and dist there
touch .gitignore
    // adding project to git
git add .
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin (https://github.com/WarlockJa/test-library.git)
git push -u origin main

    // creating a package
    // adjusting package.json. Changing name to @GITHUB_USERNAME/REPOSITORY_NAME and adding publishConfig
"publishConfig": {
  "registry": "https://npm.pkg.github.com/GITHUB_USERNAME"
}
    // login to npm
    // getting github _authToken
https://github.com/settings/tokens
>> personal access tokens
>> generate new token
(set up an expiration date)
(grant rights to write:packages)
>> generate token
    // creating Home/.npmrc
registry=https://registry.npmjs.org
@warlockja:registry=https://npm.pkg.github.com/
//npm.pkg.github.com/:_authToken=YOUR_GITHUB_TOKEN

    // publishing package
npm publish
    // associate your package with a repository on GitHub if necessary

    // adding styles to the library
    // creating Button.css file
touch src/components/Button/Button.css
Button.tsx >> import './Button.css'

    // adding rollup configs to bundle css with the library
npm i rollup-plugin-postcss --save-dev
    // import postcss in rollup.config.mjs and add it to the plugins array
    // add css regex to dts configuration section
external: [/\.css$/],

    // updating library. must have a new version. For indepth semantic versioning info https://semver.org/
Given a version number MAJOR.MINOR.PATCH, increment the:

MAJOR version when you make incompatible API changes
MINOR version when you add functionality in a backward compatible manner
PATCH version when you make backward compatible bug fixes

Additional labels for pre-release and build metadata are available as extensions to the MAJOR.MINOR.PATCH format.

    // changing version to 0.0.2 in package.json and publishing new version
npm publish

    // adding tests (jest)
npm i @testing-library/react jest @types/jest jest-environment-jsdom --save-dev
    // creating jest config file jest.config.js
touch jest.config.js
    // jest.config.js contents
module.exports = {
  testEnvironment: "jsdom",
};
    // adding Babel to deal with jsx for jest
npm i @babel/core @babel/preset-env @babel/preset-react @babel/preset-typescript babel-jest --save-dev
    // creating babel.config.js
touch babel.config.js
    // importing all presets
module.exports = {
  presets: [
    "@babel/preset-env",
    "@babel/preset-react",
    "@babel/preset-typescript",
  ],
};
    // adding identity-obj-proxy to deal with css for jest
npm i identity-obj-proxy --save-dev
    // adding identity-obj-proxy settings to jest.config.js
moduleNameMapper: {
  ".(css|less|scss)$": "identity-obj-proxy",
},
    // adding package.json test script 
"scripts": {
  ...
  "test": "jest"
},
    // creating test file
touch src/components/Button/Button.test.tsx
    // running test
npm run test

    // adding Storybook. Storybook is a sandbox testing environment library
npx sb init
    // (choosing Vite, ?)
    // creating Button.stories.tsx file
touch src/components/Button/Button.stories.tsx
    // copying content from example stories file in src/stories/Button.stories.ts